{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport boutiqueActionType from './types.boutique';\nimport { firestore, convertedtCollectionSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionSuccess, fetchCollectionFail } from './actions.boutuique';\n\nfunction* fetchCollectionAsync() {\n  yield console.log(\"I'm fired\");\n\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapShot = yield collectionRef.ge();\n    const collectionMap = yield call(convertedtCollectionSnapshotToMap, snapShot);\n    yield put(fetchCollectionSuccess(snapShot));\n  } catch (error) {\n    yield put(fetchCollectionFail(error));\n  }\n  /* const collectionRef = firestore.collection('collections'); \n  dispatch(fetchCollectionsStart());   \n  collectionRef.get().then(snapshot=>{\n      const collectionMap =  convertedtCollectionSnapshotToMap(snapshot);\n      dispatch(fetchCollectionSuccess(collectionMap));\n    }).catch(err => dispatch(fetchCollectionFail(err.message))); */\n\n}\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(boutiqueActionType.FETCH_COLLECTION_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["/Users/macbook/Desktop/React-Udemy/my-exercices/e-commerce/src/redux/boutique/boutique.sagas.js"],"names":["takeEvery","call","put","boutiqueActionType","firestore","convertedtCollectionSnapshotToMap","fetchCollectionSuccess","fetchCollectionFail","fetchCollectionAsync","console","log","collectionRef","collection","snapShot","ge","collectionMap","error","fetchCollectionsStart","FETCH_COLLECTION_START"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,IAAnB,EAAyBC,GAAzB,QAAmC,oBAAnC;AACA,OAAOC,kBAAP,MAA+B,kBAA/B;AACA,SAASC,SAAT,EAAoBC,iCAApB,QAA6D,+BAA7D;AACA,SAASC,sBAAT,EAAiCC,mBAAjC,QAA4D,qBAA5D;;AAGA,UAAUC,oBAAV,GAAgC;AAC7B,QAAMC,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAN;;AACA,MAAI;AACH,UAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,EAAd,EAAvB;AACA,UAAMC,aAAa,GAAG,MAAMd,IAAI,CAACI,iCAAD,EAAoCQ,QAApC,CAAhC;AACA,UAAMX,GAAG,CAACI,sBAAsB,CAACO,QAAD,CAAvB,CAAT;AAEA,GAND,CAME,OAAOG,KAAP,EAAc;AACZ,UAAMd,GAAG,CAACK,mBAAmB,CAACS,KAAD,CAApB,CAAT;AACH;AACD;AACH;AACA;AACA;AACA;AACA;;AACC;;AAED,OAAO,UAAUC,qBAAV,GAAiC;AACvC,QAAMjB,SAAS,CAACG,kBAAkB,CAACe,sBAApB,EAA4CV,oBAA5C,CAAf;AACA","sourcesContent":["import {takeEvery, call, put} from 'redux-saga/effects';\nimport boutiqueActionType from './types.boutique';\nimport { firestore, convertedtCollectionSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionSuccess, fetchCollectionFail } from './actions.boutuique';\n\n\nfunction* fetchCollectionAsync(){\n   yield console.log(\"I'm fired\");\n   try {\n    const collectionRef = firestore.collection('collections');\n    const snapShot = yield collectionRef.ge();\n    const collectionMap = yield call(convertedtCollectionSnapshotToMap, snapShot)\n    yield put(fetchCollectionSuccess(snapShot));\n\n   } catch (error) {\n       yield put(fetchCollectionFail(error))\n   }\n   /* const collectionRef = firestore.collection('collections'); \n   dispatch(fetchCollectionsStart());   \n   collectionRef.get().then(snapshot=>{\n       const collectionMap =  convertedtCollectionSnapshotToMap(snapshot);\n       dispatch(fetchCollectionSuccess(collectionMap));\n     }).catch(err => dispatch(fetchCollectionFail(err.message))); */\n}\n\nexport function* fetchCollectionsStart(){\n yield takeEvery(boutiqueActionType.FETCH_COLLECTION_START, fetchCollectionAsync)\n}"]},"metadata":{},"sourceType":"module"}