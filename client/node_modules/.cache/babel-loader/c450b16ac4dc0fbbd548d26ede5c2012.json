{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore'; //crédentials pour la base de donnéss \n\nconst config = {\n  apiKey: \"AIzaSyDICIOh_AmDSB5WqA2Xx7rpp8A3hVhQJZw\",\n  authDomain: \"e-commerce-c29b5.firebaseapp.com\",\n  projectId: \"e-commerce-c29b5\",\n  storageBucket: \"e-commerce-c29b5.appspot.com\",\n  messagingSenderId: \"811568928846\",\n  appId: \"1:811568928846:web:a6c8f7c9e6cdf1de05cb1f\",\n  measurementId: \"G-EC6223GXCF\"\n}; //initialisation de la base de données\n\nfirebase.initializeApp(config); //checker si l'utilisateur existe pour l'insérer sans la base de donnée\n\nexport const createUserProfileDocument = async (authUser, additionalData) => {\n  if (!authUser) return;\n  const userRef = firestore.doc(`users/${authUser.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = authUser;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  return userRef;\n}; //recuperer les données depuis le fichier data.js via redux et l'inserer sur firebase\n\nexport const addCollectionAndDocument = async (collectionName, objectToAdd) => {\n  const collectionRef = firestore.collection(collectionName);\n  const batch = firestore.batch();\n  objectToAdd.forEach(obj => {\n    //const newDocRef = firestore.doc(obj.title);\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n}; //recuperer les collection et et les transformer\n\nexport const convertedtCollectionSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      'RouteName': encodeURI(title.toLowerCase()),\n      'id': doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscrib = auth.onAuthStateChanged(userAuth => {\n      unsubscrib();\n      resolve(userAuth);\n    }, reject);\n  });\n}; //exposer ces variable  ailleur\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/macbook/Desktop/React-Udemy/my-exercices/e-commerce/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","authUser","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocument","collectionName","objectToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertedtCollectionSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscrib","auth","onAuthStateChanged","userAuth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\n\n//crédentials pour la base de donnéss \nconst config = {\n    apiKey: \"AIzaSyDICIOh_AmDSB5WqA2Xx7rpp8A3hVhQJZw\",\n    authDomain: \"e-commerce-c29b5.firebaseapp.com\",\n    projectId: \"e-commerce-c29b5\",\n    storageBucket: \"e-commerce-c29b5.appspot.com\",\n    messagingSenderId: \"811568928846\",\n    appId: \"1:811568928846:web:a6c8f7c9e6cdf1de05cb1f\",\n    measurementId: \"G-EC6223GXCF\"\n  };\n//initialisation de la base de données\n  firebase.initializeApp(config);\n\n\n  //checker si l'utilisateur existe pour l'insérer sans la base de donnée\n  export const createUserProfileDocument = async (authUser, additionalData)=>{\n    if(!authUser) return;\n    \n    const userRef =  firestore.doc(`users/${authUser.uid}`);\n    const snapShot = await userRef.get();\n\n    if(!snapShot.exists){\n        const {displayName, email} = authUser;\n        const createdAt = new Date();\n        try {\n            await userRef.set({\n                displayName, email, createdAt, ...additionalData\n            })\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n\n    return userRef;\n}\n\n//recuperer les données depuis le fichier data.js via redux et l'inserer sur firebase\nexport const addCollectionAndDocument = async (collectionName, objectToAdd)=>{\n  const collectionRef = firestore.collection(collectionName);\n  const batch = firestore.batch();\n  objectToAdd.forEach(obj => {\n    //const newDocRef = firestore.doc(obj.title);\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n\n return await batch.commit();\n}\n\n//recuperer les collection et et les transformer\nexport const convertedtCollectionSnapshotToMap= collections =>{\n  const transformedCollection = collections.docs.map(doc=>{\n    const {title, items} = doc.data()\n    return {\n      'RouteName':encodeURI(title.toLowerCase()),\n      'id':doc.id,\n      title,\n      items\n    }\n  });\n  return transformedCollection.reduce((accumulator,collection)=>{\n    accumulator[collection.title.toLowerCase()]=collection;\n    return accumulator;\n  },{});\n}\n\nexport const getCurrentUser =()=>{\n  return new Promise((resolve, reject)=>{\n    const unsubscrib =auth.onAuthStateChanged(userAuth=>{\n      unsubscrib();\n     resolve(userAuth);\n\n    }, reject)\n  })\n}\n\n//exposer ces variable  ailleur\n  export const  auth = firebase.auth();\n  export const firestore = firebase.firestore();\n\n export const googleProvider = new firebase.auth.GoogleAuthProvider();\n  googleProvider.setCustomParameters({prompt:'select_account'});\n  export const signInWithGoogle = ()=> auth.signInWithPopup(googleProvider);\n\n\n  export default firebase;"]},"metadata":{},"sourceType":"module"}