{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport boutiqueActionType from './types.boutique';\n\nfunction* fetchCollectionAsync() {\n  yield console.log(\"I'm fired\");\n  const collectionRef = firestore.collection('collections');\n  dispatch(fetchCollectionsStart());\n  collectionRef.get().then(snapshot => {\n    const collectionMap = convertedtCollectionSnapshotToMap(snapshot);\n    dispatch(fetchCollectionSuccess(collectionMap));\n  }).catch(err => dispatch(fetchCollectionFail(err.message)));\n}\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(boutiqueActionType.FETCH_COLLECTION_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["/Users/macbook/Desktop/React-Udemy/my-exercices/e-commerce/src/redux/boutique/boutique.sagas.js"],"names":["takeEvery","boutiqueActionType","fetchCollectionAsync","console","log","collectionRef","firestore","collection","dispatch","fetchCollectionsStart","get","then","snapshot","collectionMap","convertedtCollectionSnapshotToMap","fetchCollectionSuccess","catch","err","fetchCollectionFail","message","FETCH_COLLECTION_START"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,oBAAxB;AACA,OAAOC,kBAAP,MAA+B,kBAA/B;;AAGA,UAAUC,oBAAV,GAAgC;AAC7B,QAAMC,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAN;AACA,QAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAAtB;AACAC,EAAAA,QAAQ,CAACC,qBAAqB,EAAtB,CAAR;AACAJ,EAAAA,aAAa,CAACK,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAE;AAC/B,UAAMC,aAAa,GAAIC,iCAAiC,CAACF,QAAD,CAAxD;AACAJ,IAAAA,QAAQ,CAACO,sBAAsB,CAACF,aAAD,CAAvB,CAAR;AACD,GAHH,EAGKG,KAHL,CAGWC,GAAG,IAAIT,QAAQ,CAACU,mBAAmB,CAACD,GAAG,CAACE,OAAL,CAApB,CAH1B;AAIF;;AAED,OAAO,UAAUV,qBAAV,GAAiC;AACvC,QAAMT,SAAS,CAACC,kBAAkB,CAACmB,sBAApB,EAA4ClB,oBAA5C,CAAf;AACA","sourcesContent":["import {takeEvery} from 'redux-saga/effects';\nimport boutiqueActionType from './types.boutique';\n\n\nfunction* fetchCollectionAsync(){\n   yield console.log(\"I'm fired\");\n   const collectionRef = firestore.collection('collections'); \n   dispatch(fetchCollectionsStart());   \n   collectionRef.get().then(snapshot=>{\n       const collectionMap =  convertedtCollectionSnapshotToMap(snapshot);\n       dispatch(fetchCollectionSuccess(collectionMap));\n     }).catch(err => dispatch(fetchCollectionFail(err.message)));\n}\n\nexport function* fetchCollectionsStart(){\n yield takeEvery(boutiqueActionType.FETCH_COLLECTION_START, fetchCollectionAsync)\n}"]},"metadata":{},"sourceType":"module"}