{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport userActionTypes from \"./user.types\";\nimport { auth, googleProvider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\nimport { signInFailure, signInSuccess } from './user.action';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapShot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapShot.id,\n      ...userSnapShot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {} catch (error) {}\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield put(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* userSaga() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/macbook/Desktop/React-Udemy/my-exercices/e-commerce/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","userActionTypes","auth","googleProvider","createUserProfileDocument","signInFailure","signInSuccess","getSnapshotFromUserAuth","userAuth","userRef","userSnapShot","get","id","data","error","isUserAuthenticated","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onGoogleSignInStart","GOOGLE_SIGN_IN_START","userSaga"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,QAAgE,+BAAhE;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA4C,eAA5C;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA2C;AAC9C,MAAG;AACC,UAAMC,OAAO,GAAG,MAAMT,IAAI,CAACI,yBAAD,EAA2BI,QAA3B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMb,GAAG,CAACQ,aAAa,CAAC;AAACM,MAAAA,EAAE,EAACF,YAAY,CAACE,EAAjB;AAAqB,SAAGF,YAAY,CAACG,IAAb;AAAxB,KAAD,CAAd,CAAT;AACH,GAJD,CAIE,OAAOC,KAAP,EAAc;AACb,UAAMhB,GAAG,CAACO,aAAa,CAACS,KAAD,CAAd,CAAT;AACF;AACJ;AAED,OAAO,UAAUC,mBAAV,GAA+B;AAClC,MAAI,CAEH,CAFD,CAEE,OAAOD,KAAP,EAAc,CAEf;AACJ;AAED,OAAO,UAAUE,gBAAV,GAA6B;AAChC,MAAI;AACA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMf,IAAI,CAACgB,eAAL,CAAqBf,cAArB,CAArB;AACA,UAAMI,uBAAuB,CAACU,IAAD,CAA7B;AACH,GAHD,CAGE,OAAOH,KAAP,EAAc;AACb,UAAMhB,GAAG,CAACO,aAAa,CAACS,KAAD,CAAd,CAAT;AACF;AACJ;AAGD,OAAO,UAAUK,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAT,CAA1B,EAAsD;AACzD,MAAI;AACA,UAAM;AAACL,MAAAA;AAAD,QAAS,MAAMf,IAAI,CAACqB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAArB;AACA,UAAMf,uBAAuB,CAACU,IAAD,CAA7B;AAEH,GAJD,CAIE,OAAOH,KAAP,EAAc;AACZ,UAAMhB,GAAG,CAACO,aAAa,CAACS,KAAD,CAAd,CAAT;AACH;AACJ;AAID,OAAO,UAAUU,kBAAV,GAA8B;AACjC,QAAM3B,UAAU,CAACI,eAAe,CAACwB,mBAAjB,EAAsCN,eAAtC,CAAhB;AACH;AAED,OAAO,UAAUO,kBAAV,GAA8B;AACjC,QAAM5B,GAAG,CAACG,eAAe,CAAC0B,kBAAjB,EAAqCZ,mBAArC,CAAT;AACH;AAED,OAAO,UAAUa,mBAAV,GAA+B;AAClC,QAAM/B,UAAU,CAACI,eAAe,CAAC4B,oBAAjB,EAAuCb,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUc,QAAV,GAAoB;AACvB,QAAM/B,GAAG,CAAC,CACNC,IAAI,CAAC4B,mBAAD,CADE,EAEN5B,IAAI,CAACwB,kBAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport userActionTypes from \"./user.types\";\nimport { auth, googleProvider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\nimport { signInFailure, signInSuccess} from './user.action';\n\nexport function* getSnapshotFromUserAuth(userAuth){\n    try{\n        const userRef = yield call(createUserProfileDocument,userAuth);\n        const userSnapShot = yield userRef.get();\n        yield put(signInSuccess({id:userSnapShot.id, ...userSnapShot.data()}));\n    } catch (error) {\n       yield put(signInFailure(error))\n    }\n}\n\nexport function* isUserAuthenticated(){\n    try {\n        \n    } catch (error) {\n        \n    }\n}\n\nexport function* signInWithGoogle (){\n    try {\n        const {user} = yield auth.signInWithPopup(googleProvider);\n        yield getSnapshotFromUserAuth(user);\n    } catch (error) {\n       yield put(signInFailure(error))\n    }\n}\n\n\nexport function* signInWithEmail({payload:{email, password}}){\n    try {\n        const {user} = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user);\n\n    } catch (error) {\n        yield put(signInFailure(error));\n    }\n}\n\n\n\nexport function* onEmailSignInStart(){\n    yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* onCheckUserSession(){\n    yield put(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* onGoogleSignInStart(){\n    yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* userSaga(){\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart)\n    ])\n}"]},"metadata":{},"sourceType":"module"}